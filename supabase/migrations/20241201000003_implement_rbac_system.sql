 -- Migration: Implement RBAC (Role-Based Access Control) System
-- This migration replaces hardcoded admin permissions with a proper role-based system

-- Custom types for permissions and roles
CREATE TYPE public.app_permission AS ENUM (
    'requests.view_all',
    'requests.update_all', 
    'requests.delete_all',
    'requests.complete_all',
    'requests.cancel_all',
    'comments.view_all',
    'comments.update_all',
    'comments.delete_all',
    'comments.moderate_all'
);

CREATE TYPE public.app_role AS ENUM (
    'admin',
    'moderator',
    'support',
    'user'
);

-- USER ROLES table
CREATE TABLE IF NOT EXISTS public.user_roles (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID REFERENCES auth.users ON DELETE CASCADE NOT NULL,
    role app_role NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    created_by UUID REFERENCES auth.users ON DELETE SET NULL,
    UNIQUE (user_id, role)
);

COMMENT ON TABLE public.user_roles IS 'Application roles for each user.';

-- ROLE PERMISSIONS table
CREATE TABLE IF NOT EXISTS public.role_permissions (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    role app_role NOT NULL,
    permission app_permission NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    UNIQUE (role, permission)
);

COMMENT ON TABLE public.role_permissions IS 'Application permissions for each role.';

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_user_roles_user_id ON public.user_roles(user_id);
CREATE INDEX IF NOT EXISTS idx_user_roles_role ON public.user_roles(role);
CREATE INDEX IF NOT EXISTS idx_role_permissions_role ON public.role_permissions(role);
CREATE INDEX IF NOT EXISTS idx_role_permissions_permission ON public.role_permissions(permission);

-- Enable Row Level Security (RLS)
ALTER TABLE public.user_roles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.role_permissions ENABLE ROW LEVEL SECURITY;

-- Create policies for user_roles table
-- Users can view their own roles
DROP POLICY IF EXISTS "Users can view their own roles" ON public.user_roles;
CREATE POLICY "Users can view their own roles" ON public.user_roles
    FOR SELECT USING (user_id = auth.uid());

-- Only admins can manage user roles
DROP POLICY IF EXISTS "Admins can manage user roles" ON public.user_roles;
CREATE POLICY "Admins can manage user roles" ON public.user_roles
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM public.user_roles ur
            WHERE ur.user_id = auth.uid() AND ur.role = 'admin'
        )
    );

-- Create policies for role_permissions table
-- Everyone can view role permissions (read-only)
DROP POLICY IF EXISTS "Everyone can view role permissions" ON public.role_permissions;
CREATE POLICY "Everyone can view role permissions" ON public.role_permissions
    FOR SELECT USING (true);

-- Only admins can manage role permissions
DROP POLICY IF EXISTS "Admins can manage role permissions" ON public.role_permissions;
CREATE POLICY "Admins can manage role permissions" ON public.role_permissions
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM public.user_roles ur
            WHERE ur.user_id = auth.uid() AND ur.role = 'admin'
        )
    );

-- Grant necessary permissions
GRANT ALL ON public.user_roles TO authenticated;
GRANT ALL ON public.role_permissions TO authenticated;
GRANT USAGE ON SCHEMA public TO authenticated;

-- Insert default role permissions
INSERT INTO public.role_permissions (role, permission) VALUES
-- Admin permissions (full access)
('admin', 'requests.view_all'),
('admin', 'requests.update_all'),
('admin', 'requests.delete_all'),
('admin', 'requests.complete_all'),
('admin', 'requests.cancel_all'),
('admin', 'comments.view_all'),
('admin', 'comments.update_all'),
('admin', 'comments.delete_all'),
('admin', 'comments.moderate_all'),

-- Moderator permissions (can view and moderate)
('moderator', 'requests.view_all'),
('moderator', 'requests.update_all'),
('moderator', 'comments.view_all'),
('moderator', 'comments.moderate_all'),

-- Support permissions (can view and update requests)
('support', 'requests.view_all'),
('support', 'requests.update_all'),
('support', 'comments.view_all'),
('support', 'comments.update_all'),

-- User permissions (basic access - handled by existing policies)
('user', 'requests.view_all');

-- Create helper function to check if user has permission
CREATE OR REPLACE FUNCTION public.has_permission(required_permission app_permission)
RETURNS BOOLEAN AS $$
BEGIN
    RETURN EXISTS (
        SELECT 1 
        FROM public.user_roles ur
        JOIN public.role_permissions rp ON ur.role = rp.role
        WHERE ur.user_id = auth.uid() 
        AND rp.permission = required_permission
    );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Create helper function to check if user has role
CREATE OR REPLACE FUNCTION public.has_role(required_role app_role)
RETURNS BOOLEAN AS $$
BEGIN
    RETURN EXISTS (
        SELECT 1 
        FROM public.user_roles ur
        WHERE ur.user_id = auth.uid() 
        AND ur.role = required_role
    );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Drop existing policies that use hardcoded admin checks
DROP POLICY IF EXISTS "Admins can view all requests" ON public.requests;
DROP POLICY IF EXISTS "Admins can update all requests" ON public.requests;
DROP POLICY IF EXISTS "Users can view request comments" ON public.request_comments;
DROP POLICY IF EXISTS "Users can insert request comments" ON public.request_comments;

-- Create new policies using RBAC
-- Admins can view all requests
DROP POLICY IF EXISTS "Admins can view all requests" ON public.requests;
CREATE POLICY "Admins can view all requests" ON public.requests
    FOR SELECT USING (
        auth.jwt() ->> 'email' = created_by_email OR 
        public.has_permission('requests.view_all')
    );

-- Admins can update all requests
DROP POLICY IF EXISTS "Admins can update all requests" ON public.requests;
CREATE POLICY "Admins can update all requests" ON public.requests
    FOR UPDATE USING (
        auth.jwt() ->> 'email' = created_by_email OR 
        public.has_permission('requests.update_all')
    );

-- Users can view comments for requests they can access
DROP POLICY IF EXISTS "Users can view request comments" ON public.request_comments;
CREATE POLICY "Users can view request comments" ON public.request_comments
    FOR SELECT USING (
        EXISTS (
            SELECT 1 FROM public.requests 
            WHERE requests.id = request_comments.request_id 
            AND (requests.created_by_email = auth.jwt() ->> 'email' OR 
                 public.has_permission('comments.view_all'))
        )
    );

-- Users can insert comments for requests they can access
DROP POLICY IF EXISTS "Users can insert request comments" ON public.request_comments;
CREATE POLICY "Users can insert request comments" ON public.request_comments
    FOR INSERT WITH CHECK (
        EXISTS (
            SELECT 1 FROM public.requests 
            WHERE requests.id = request_comments.request_id 
            AND (requests.created_by_email = auth.jwt() ->> 'email' OR 
                 public.has_permission('comments.view_all'))
        )
    );

-- Add additional policies for request management
-- Users with appropriate permissions can complete requests
DROP POLICY IF EXISTS "Users can complete requests" ON public.requests;
CREATE POLICY "Users can complete requests" ON public.requests
    FOR UPDATE USING (
        auth.jwt() ->> 'email' = created_by_email OR 
        public.has_permission('requests.complete_all')
    );

-- Users with appropriate permissions can cancel requests
DROP POLICY IF EXISTS "Users can cancel requests" ON public.requests;
CREATE POLICY "Users can cancel requests" ON public.requests
    FOR UPDATE USING (
        auth.jwt() ->> 'email' = created_by_email OR 
        public.has_permission('requests.cancel_all')
    );

-- Users with appropriate permissions can delete requests
DROP POLICY IF EXISTS "Users can delete requests" ON public.requests;
CREATE POLICY "Users can delete requests" ON public.requests
    FOR DELETE USING (
        auth.jwt() ->> 'email' = created_by_email OR 
        public.has_permission('requests.delete_all')
    );

-- Users with appropriate permissions can moderate comments
DROP POLICY IF EXISTS "Users can moderate comments" ON public.request_comments;
CREATE POLICY "Users can moderate comments" ON public.request_comments
    FOR UPDATE USING (
        created_by_email = auth.jwt() ->> 'email' OR 
        public.has_permission('comments.moderate_all')
    );

-- Users with appropriate permissions can delete comments
DROP POLICY IF EXISTS "Users can delete comments" ON public.request_comments;
CREATE POLICY "Users can delete comments" ON public.request_comments
    FOR DELETE USING (
        created_by_email = auth.jwt() ->> 'email' OR 
        public.has_permission('comments.delete_all')
    );